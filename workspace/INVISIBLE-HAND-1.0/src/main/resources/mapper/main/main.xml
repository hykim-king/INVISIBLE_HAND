<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pcwk.ehr.main">



  <!-- default임. maincategory 변수만 들어오면 해당 쿼리가 작동함. -->
  <select id="chartGraphAvg" parameterType="ChartVO" resultType="ChartVO">
     SELECT
        TO_CHAR(chartdate,'YYYY.MM')AS chartdate,
        maincategory,
        ROUND(AVG(NVL(sbhi,0))  ,1) AS sbhiAvg ,
        ROUND(AVG(NVL(sbhi2,0)) ,1) AS sbhi2Avg,
        ROUND(AVG(NVL(sbhi3,0)) ,1) AS sbhi3Avg,
        ROUND(AVG(NVL(sbhi4,0)) ,1) AS sbhi4Avg,
        ROUND(AVG(NVL(sbhi5,0)) ,1) AS sbhi5Avg,
        ROUND(AVG(NVL(sbhi6,0)) ,1) AS sbhi6Avg,
        ROUND(AVG(NVL(sbhi7,0)) ,1) AS sbhi7Avg,
        ROUND(AVG(NVL(sbhi8,0)) ,1) AS sbhi8Avg,
        ROUND(AVG(NVL(sbhi9,0)) ,1) AS sbhi9Avg,
        ROUND(AVG(NVL(sbhi10,0)),1) AS sbhi10Avg
      FROM
        SBHITABLE
      GROUP BY chartdate,maincategory
      HAVING maincategory = #{maincategory}
      ORDER BY chartdate
  </select>
   
  <!-- maincategory와 subcategory 변수가 들어오면 작동하는 쿼리 -->
  <select id="chartGraph" parameterType="ChartVO" resultType="ChartVO">
	   SELECT
	    TO_CHAR(chartdate,'YYYY.MM') as chartdate,
	    maincategory,
      subcategory,
      NVL(sbhi,0)  AS sbhi,
      NVL(sbhi2,0) AS sbhi2,
      NVL(sbhi3,0) AS sbhi3,
      NVL(sbhi4,0) AS sbhi4,
      NVL(sbhi5,0) AS sbhi5,
      NVL(sbhi6,0) AS sbhi6,
      NVL(sbhi7,0) AS sbhi7,
      NVL(sbhi8,0) AS sbhi8,
      NVL(sbhi9,0) AS sbhi9,
      NVL(sbhi10,0)AS sbhi10
	    FROM
	        SBHITABLE
	    WHERE maincategory = #{maincategory}
	    AND subcategory  = #{subcategory}
	    ORDER BY chartdate
   </select>
  
  
      
  <select id="doRetrieve" parameterType="PostVO" resultType="PostVO">
		<![CDATA[
		SELECT A.*, B.*
		FROM (
		  SELECT TT1.rnum as num,
		         TT1.title,
		         TT1.categoryNumber,
		         TT1.views,
		         TT1.likes,
		         CASE
		           WHEN TRUNC(TT1.writtenDate) = TRUNC(SYSDATE) THEN TO_CHAR(TT1.writtenDate, 'HH24:MI')
		           ELSE TO_CHAR(TT1.writtenDate, 'YYYY/MM/DD')
		         END AS writtenDate,
		         TT1.nickname,
		         TT1.postNumber
		  FROM (
		    SELECT ROWNUM as rnum, t1.*
		    FROM (
		      SELECT *
		      FROM board
		      WHERE categoryNumber = #{categoryNumber}
		      ORDER BY likes DESC
		    ) t1
		       WHERE ROWNUM >= 1
		  ) TT1  
		 WHERE rnum <=5
		) A
		CROSS JOIN (
		  SELECT COUNT(postNumber) totalCnt
		  FROM board
		  WHERE categoryNumber = #{categoryNumber}
		) B	]]>	
  </select>
  
              <!-- 랭킹 관련 sql -->
  
	  <!-- 1. 랭킹 정보 main 화면에 출력할 로직 -->
	<select id="doGetRanking"  resultType="RankVO">
      SELECT 
          currentRank,
          name,
          previousRank-currentRank as changeRank
		  FROM RANKING
		  ORDER BY currentRank ASC
	</select>  
	  
	  <!-- 2. 설문이 성공적으로 return시 선택한 업종의 score에  +1 -->
	<update id="doUpdateScore" parameterType="RankVO">
	   UPDATE Ranking
		 SET score = NVL(score,0) + 1 
		 WHERE name = #{name}
	</update>
	
	  <!-- 3. 이전 랭킹과 현재 랭킹을 기록  -->
	    <!-- 3.1 현재 랭킹을 이전 랭킹에 기록 -->
	<update id="doUpdatePrevious" parameterType="RankVO">
	   UPDATE Ranking 
	   SET previousRank = currentRank
	</update>
	
	    <!-- 3.2 현재 랭킹을 score에 의해 랭킹 업데이트-->
  <update id="doUpdateCurrent" parameterType="RankVO">
     UPDATE Ranking
     SET currentRank = 
       (
		    SELECT newRank
		    FROM (
		        SELECT
		            name,
		            RANK() OVER (ORDER BY score DESC) AS newRank
		        FROM Ranking
		    ) source
		    WHERE source.name = Ranking.name
		    ),
    rankingUpdate = SYSDATE
  </update>
  
          <!-- 랭킹 관련 sql END -->
</mapper>