<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<!-- 화원가입  -->
<mapper namespace="mapper.member.memberMapper">
    <!-- parameterType 은 풀 패키지 명을 명시해야함. 하지만 config.xml 에서 설정 추가-->
    <insert id="add" parameterType="MemberVO">
        INSERT INTO MEMBER (
            memberId,
            password,
            memberGrade,
            memberName,
            email,
            nickName,
            isverified,
            phoneNumber
            )
        VALUES (
            #{memberId},
            #{password},
            3, 
            #{memberName}, 
            #{email}, 
            #{nickName},
            'Y',
            #{phoneNumber}
            )
    </insert>
  
  
    <!-- 아이디 중복 체크 여부 -->
    <select id = "idCheck" parameterType="MemberVO" resultType="int">
      SELECT COUNT(*) FROM member
      WHERE memberId = #{memberId}
    </select>
    
    <!-- 닉네임 중복 체크 여부 -->
    <select id = "nickNameCheck" parameterType="MemberVO" resultType="int">
      SELECT COUNT(*) FROM member
      WHERE nickName = #{nickName}
    </select>
    
    <!-- 이메일 중복 체크 여부 -->
    <select id = "emailCheck" parameterType="MemberVO" resultType="int">
      SELECT COUNT(*) FROM member
      WHERE email = #{email}
    </select>    
  
  
    <!-- 로그인 시 아이디 체크 -->
    <select id="loginIdCheck" parameterType="MemberVO" resultType="int">
        SELECT COUNT(*) cnt
        FROM member
        WHERE memberId = #{memberId}    
    </select>   
  
    <!-- 로그인 시 비번 체크 --> 
    <select id="passCheck" parameterType="MemberVO" resultType="int">
      SELECT COUNT(*) cnt
      FROM member
      WHERE memberId = #{memberId}
      AND   password = #{password}
    </select>
    
   <!-- db에서 아이디를 받을 때 암호화된 비밀번호 호출 -->
    <select id="getStoredEncryptedPassword" parameterType="MemberVO" resultType="java.lang.String">
        SELECT password
        FROM member
        WHERE memberId = #{memberId}
    </select>
   

    
    
    <!-- 비밀번호 변경 --> 
    <update id="find" parameterType="MemberVO">
      UPDATE MEMBER SET PASSWORD = #{password} WHERE EMAIL = #{email} 
    </update>

    <!-- 회원탈퇴 -->     
    <delete id="delete" parameterType="MemberVO">
      DELETE FROM MEMBER
      WHERE
      email = #{email} AND Password=#{password}
    </delete>
    
    <!-- 회원 강제 탈퇴 -->
    <delete id="deleteOne" parameterType="MemberVO">
      DELETE FROM MEMBER
      WHERE memberId = #{memberId}
    </delete>
  
    <select id="findAll" resultType="MemberVO">
        SELECT * FROM MEMBER
    </select>
    
    <!-- 로그인 -->
     <select id="get" parameterType="MemberVO" resultType="MemberVO">
		   SELECT
			  memberId
			  , password
			  , membergrade
			  , membername
			  , email
			  , nickname
			  , TO_CHAR(joindate,'yyyy-mm-dd HH24MISS') JoinDate
			  , TO_CHAR(updatedate,'yyyy-mm-dd HH24MISS') updateDate
			  , isverified
			  , phoneNumber
			FROM
			 member
			WHERE  memberId = #{memberId}
 
 </select>
 
 <update id="update" parameterType="MemberVO">
       UPDATE member          
       SET  memberId      =  #{memberId} 
           ,nickName      =  #{nickName} 
           ,memberName    =  #{memberName} 
           ,memberGrade   =  #{memberGrade}     
           ,email         =  #{email}     
           ,updateDate    =  #{updateDate}     

       WHERE                     
               memberId = #{memberId}     

</update>
  
  <select id="selectByEmail" parameterType="MemberVO" resultType="MemberVO">
    SELECT 
      memberId
      , password
      , membergrade
      , membername
      , email
      , nickname
      , JoinDate
      , updateDate
      , isverified
      , phoneNumber
    FROM
      member
    WHERE
      email = #{email}
  </select>
  
  <update id="updateByMemberGrade" parameterType="MemberVO">
    UPDATE member
    SET  memberGrade = #{memberGrade}
    WHERE
    email = #{email}
  </update>
    
</mapper>