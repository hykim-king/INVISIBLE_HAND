<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<!-- 화원가입  -->
<mapper namespace="mapper.member.memberMapper">
    <!-- parameterType 은 풀 패키지 명을 명시해야함. 하지만 config.xml 에서 설정 추가-->
    <insert id="add" parameterType="MemberVO">
        INSERT INTO MEMBER (
            memberId,
            password,
            memberGrade,
            memberName,
            email,
            nickName,
            isverified,
            phoneNumber
            )
        VALUES (
            #{memberId},
            #{password},
            3, 
            #{memberName}, 
            #{email}, 
            #{nickName},
            'Y',
            #{phoneNumber}
            )
    </insert>
  
  
    <!-- 아이디 중복 체크 여부 -->
    <select id = "idCheck" parameterType="MemberVO" resultType="int">
      SELECT COUNT(*) FROM member
      WHERE memberId = #{memberId}
    </select>
    
    <!-- 닉네임 중복 체크 여부 -->
    <select id = "nickNameCheck" parameterType="MemberVO" resultType="int">
      SELECT COUNT(*) FROM member
      WHERE nickName = #{nickName}
    </select>
    
    <!-- 이메일 중복 체크 여부 -->
    <select id = "emailCheck" parameterType="MemberVO" resultType="int">
      SELECT COUNT(*) FROM member
      WHERE email = #{email}
    </select>    
  
  
    <!-- 로그인 시 아이디 체크 -->
    <select id="loginIdCheck" parameterType="MemberVO" resultType="int">
        SELECT COUNT(*) cnt
        FROM member
        WHERE memberId = #{memberId}    
    </select>   
  
    <!-- 로그인 시 비번 체크 --> 
    <select id="passCheck" parameterType="MemberVO" resultType="int">
      SELECT COUNT(*) cnt
      FROM member
      WHERE memberId = #{memberId}
      AND   password = #{password}
    </select>
   
    
    <!-- 비밀번호 변경 --> 
    <update id="find" parameterType="MemberVO">
      UPDATE 
      MEMBER SET PASSWORD = #{password} 
      WHERE EMAIL = #{email} 
    </update>

    <!-- 회원탈퇴 -->     
    <delete id="delete" parameterType="MemberVO">
      DELETE FROM MEMBER
      WHERE
      Password=#{password}
    </delete>
    
    <!-- 회원 강제 탈퇴 -->
    <delete id="deleteOne" parameterType="MemberVO">
      DELETE FROM MEMBER
      WHERE memberId = #{memberId}
    </delete>
  
    <select id="findAll" resultType="MemberVO">
        SELECT * FROM MEMBER
    </select>
    
    <!-- 로그인 -->
     <select id="get" parameterType="MemberVO" resultType="MemberVO">
       SELECT
        memberId
        , password
        , membergrade
        , membername
        , email
        , nickname
        , TO_CHAR(joindate,'yyyy-mm-dd HH24MISS') JoinDate
        , TO_CHAR(updatedate,'yyyy-mm-dd HH24MISS') updateDate
        , isverified
        , phoneNumber
      FROM
       member
      WHERE  memberId = #{memberId}
 
 </select>
 
 <update id="update" parameterType="MemberVO">
       UPDATE member          
       SET  memberId      =  #{memberId} 
           ,nickName      =  #{nickName}   
           ,password      =  #{password}
           ,email         =  #{email}        

       WHERE                     
            memberId = #{memberId}     

</update>
  
  <select id="selectByEmail" parameterType="MemberVO" resultType="MemberVO">
    SELECT 
      memberId
      , password
      , membergrade
      , membername
      , email
      , nickname
      , JoinDate
      , updateDate
      , isverified
      , phoneNumber
    FROM
      member
    WHERE
      email = #{email}
  </select>
  
  <update id="updateByMemberGrade" parameterType="MemberVO">
    UPDATE member
    SET  memberGrade = #{memberGrade}
    WHERE
    email = #{email}
  </update>
    
   <!-- admin 페이지에서 필요한 sql -->
   <update id="adminUpdate" parameterType="MemberVO"> 
       UPDATE member          
       SET  memberId      =  #{memberId} 
           ,nickName      =  #{nickName}   
           ,memberName    =  #{memberName}
           ,memberGrade   =  #{memberGrade}
           ,email         =  #{email}
       WHERE                     
            memberId = #{memberId}
   
   </update> 
 
 
 
   <!-- 검색조건 -->
  <!--10 전체(닉네임(nickName)+등급(memberGrade)+이메일(email))20 닉네임  30 등급 40 이메일 -->
  <sql id="searchCondition">
    <if test="searchWord != ''">
        <choose>
            <when test="searchDiv == '10'">
                AND (nickName LIKE '%' || #{searchWord} || '%' OR memberGrade LIKE '%' || #{searchWord} || '%' OR email LIKE '%' || #{searchWord} || '%')
            </when>
            <when test="searchDiv == '20'">
                AND nickName LIKE '%' || #{searchWord} || '%'
            </when>
            <when test="searchDiv == '30'">
                AND memberGrade LIKE '%' || #{searchWord} || '%'
            </when>
            <when test="searchDiv == '40'">
                AND email LIKE '%' || #{searchWord} || '%'
            </when>
        </choose>
    </if>
</sql>
 
 <!-- 페이징 -->
 <select id="doRetrieve" parameterType="DTO" resultType="MemberVO">
  SELECT A.*,B.*
  FROM(
    SELECT TT1.rnum as num,
            TT1.memberId    as memberId,
            TT1.nickName    as nickName,
            TT1.memberName  as memberName,
            TT1.memberGrade as memberGrade,
            TT1.email       as email,
            TO_CHAR(TT1.UpdateDate,'YYYY-MM-DD') as UpdateDate
    FROM(
      SELECT ROWNUM as rnum, T1.*
      FROM(
        SELECT *
        FROM member
        <include refid="searchCondition"></include>
        ORDER BY nickName DESC
        )T1
      <![CDATA[     WHERE ROWNUM <= #{pageSize} * (#{pageNo}-1)+#{pageSize}   ]]>
      )TT1
      <![CDATA[    WHERE rnum >=#{pageSize} * (#{pageNo}-1)+ 1 ]]>
  )A
  CROSS JOIN
  (
  SELECT COUNT(memberId) totalCnt
  FROM Member
  <include refid="searchCondition"></include>
  )B
</select>


</mapper>