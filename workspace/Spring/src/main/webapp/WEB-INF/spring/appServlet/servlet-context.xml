<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:mvc="http://www.springframework.org/schema/mvc"
  xmlns:beans="http://www.springframework.org/schema/beans"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:task="http://www.springframework.org/schema/task"
  xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
                    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
    http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
    ">
    
  <task:annotation-driven scheduler="scheduler" />
  <task:scheduler id="scheduler" pool-size="10" />     
               
  <!--scheduler cron -->
  <task:scheduled-tasks>
    <task:scheduled ref="cronTest" method="test" cron="0/10 * * * 12 * "/>
    <!-- 10:30 매일, 매월, 매주 -->
    <task:scheduled ref="memberUpgradeLevelCron" method="upgradeLevelsCron" cron="0 33 10 * 12 ?"/>
  </task:scheduled-tasks>
  
   
  <!-- login interceptor -->   
<!--   <beans:bean id="loginInterceptor" class="com.pcwk.ehr.cmn.LoginInterceptor"></beans:bean>
 -->  <!-- interceptors -->
  
  
<!--   <mvc:interceptors>
    <mvc:interceptor>
        <mvc:mapping path="/**"/> 모든 요청
        <mvc:exclude-mapping path="/login/**"/> 예외 요청
        <mvc:exclude-mapping path="/boot/**"/>  예외 요청
        <beans:ref bean="loginInterceptor"/>
    </mvc:interceptor>
  </mvc:interceptors> -->


	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />   

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

  <!-- tiles config : order:1 -->
  <beans:bean id="tilesViewResolver" class="org.springframework.web.servlet.view.tiles3.TilesViewResolver">
      <beans:property name="order"  value="1"/>
  </beans:bean>

  <!-- tiles main config: tiles.xml -->
  <beans:bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
     <beans:property name="definitions">
      <beans:list>
        <beans:value>/WEB-INF/views/tiles/tiles.xml</beans:value>
      </beans:list>
     </beans:property>
  
  </beans:bean>


	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order"  value="3"/> <!--ViewResolver 읽는 순서 2번째 -->
		
	</beans:bean>
	
	<!-- DownloadView -->
	<beans:bean id="downloadView" class="com.pcwk.ehr.file.DownloadView"/>
	
	<!-- view이름과 동일한 view를 찾아 주는 BeanNameViewResolver -->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
	   <beans:property name="order" value="2"/> <!--ViewResolver 읽는 순서 1번째 -->
	</beans:bean>
	<context:component-scan base-package="com.pcwk.ehr" />
	
	
	
</beans:beans>
